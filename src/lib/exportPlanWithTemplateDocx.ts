import {
  Document,
  Packer,
  Paragraph,
  TextRun,
  AlignmentType,
  Table,
  TableRow,
  TableCell,
  WidthType,
  BorderStyle,
  ImageRun,
  HeadingLevel,
  PageOrientation,
} from "docx";
import { saveAs } from "file-saver";

// üß© H√†m t·∫°o b·∫£ng th·∫≠t (Insert Table)
function makeRealTable(headers: string[], rows: any[][]) {
  const border = {
    top: { style: BorderStyle.SINGLE, size: 1, color: "000000" },
    bottom: { style: BorderStyle.SINGLE, size: 1, color: "000000" },
    left: { style: BorderStyle.SINGLE, size: 1, color: "000000" },
    right: { style: BorderStyle.SINGLE, size: 1, color: "000000" },
  };

  return new Table({
    width: { size: 100, type: WidthType.PERCENTAGE },
    rows: [
      new TableRow({
        children: headers.map(
          (h) =>
            new TableCell({
              borders: border,
              children: [
                new Paragraph({
                  children: [new TextRun({ text: h, bold: true })],
                }),
              ],
            })
        ),
      }),
      ...rows.map(
        (r) =>
          new TableRow({
            children: r.map(
              (c) =>
                new TableCell({
                  borders: border,
                  children: [
                    new Paragraph({
                      children: [
                        new TextRun({ text: String(c || ""), size: 24 }),
                      ],
                    }),
                  ],
                })
            ),
          })
      ),
    ],
  });
}

// üß© H√†m format ng√†y/gi·ªù
function formatTimeRange(start?: string, end?: string) {
  if (!start || !end) return "";
  const s = new Date(start);
  const e = new Date(end);

  const sameDay =
    s.getFullYear() === e.getFullYear() &&
    s.getMonth() === e.getMonth() &&
    s.getDate() === e.getDate();

  const pad = (n: number) => String(n).padStart(2, "0");

  if (sameDay)
    return `${pad(s.getHours())}:${pad(s.getMinutes())} ‚Äì ${pad(
      e.getHours()
    )}:${pad(e.getMinutes())}, ng√†y ${s.getDate()} th√°ng ${
      s.getMonth() + 1
    } nƒÉm ${s.getFullYear()}`;
  else
    return `${pad(s.getHours())}:${pad(s.getMinutes())} ${pad(
      s.getDate()
    )}/${pad(s.getMonth() + 1)}/${s.getFullYear()} ‚Äì ${pad(e.getHours())}:${pad(
      e.getMinutes()
    )} ${pad(e.getDate())}/${pad(e.getMonth() + 1)}/${e.getFullYear()}`;
}

// üß© H√†m t·∫°o ƒëo·∫°n vƒÉn b·∫£n chu·∫©n format
function makeParagraph(text: string, options: any = {}) {
  return new Paragraph({
    spacing: { after: 100, line: 300 },
    alignment: options.align || AlignmentType.JUSTIFIED,
    children: [new TextRun({ text, bold: !!options.bold, size: 24 })],
  });
}

// üß© H√†m ch√≠nh
export async function exportPlanWithTemplate(
  planData: any,
  eventTitle: string
) {
  const sections: any[] = [];

  // üè´ Th√™m logo & ti√™u ƒë·ªÅ
  const logoResponse = await fetch("/images/logo_fit_iuh.png");
  const logoBuffer = await logoResponse.arrayBuffer();

  sections.push(
    new Paragraph({
      alignment: AlignmentType.CENTER,
      children: [
        new ImageRun({
          data: logoBuffer,
          transformation: { width: 120, height: 120 },
          type: "png",
        }),
      ],
    })
  );

  sections.push(
    new Paragraph({
      alignment: AlignmentType.CENTER,
      children: [
        new TextRun({
          text: "K·∫æ HO·∫†CH T·ªî CH·ª®C CH∆Ø∆†NG TR√åNH",
          bold: true,
          size: 32,
        }),
      ],
    })
  );

  sections.push(new Paragraph(""));

  // üßæ Duy·ªát qua th·ª© t·ª± danh m·ª•c
  const order = [
    "M·ª•c ƒë√≠ch",
    "Th·ªùi gian & ƒë·ªãa ƒëi·ªÉm",
    "K·∫ø ho·∫°ch di chuy·ªÉn",
    "N·ªôi dung ch∆∞∆°ng tr√¨nh",
    "Ban t·ªï ch·ª©c ch∆∞∆°ng tr√¨nh",
    "Ti·∫øn ƒë·ªô th·ª±c hi·ªán ch∆∞∆°ng tr√¨nh",
    "Kinh ph√≠ th·ª±c hi·ªán",
    "Th√†nh ph·∫ßn tham d·ª±",
  ];

  let index = 1;
  for (const category of order) {
    if (!planData[category]) continue;

    // Ti√™u ƒë·ªÅ m·ª•c
    sections.push(
      new Paragraph({
        spacing: { after: 200, before: 200 },
        children: [
          new TextRun({
            text: `${index}. ${category.toUpperCase()}`,
            bold: true,
            size: 26,
          }),
        ],
      })
    );

    // N·ªôi dung t·ª´ng m·ª•c
    if (category === "M·ª•c ƒë√≠ch") {
      sections.push(makeParagraph(planData[category]?.["N·ªôi dung"] || ""));
    }

    if (category === "Th·ªùi gian & ƒë·ªãa ƒëi·ªÉm") {
      const timeRange = formatTimeRange(
        planData[category]?.["Th·ªùi gian"]?.[0],
        planData[category]?.["Th·ªùi gian"]?.[1]
      );
      const diaDiem = planData[category]?.["ƒê·ªãa ƒëi·ªÉm"] || "";
      sections.push(makeParagraph(`- Th·ªùi gian: ${timeRange}`));
      sections.push(makeParagraph(`- ƒê·ªãa ƒëi·ªÉm: ${diaDiem}`));
    }

    if (category === "K·∫ø ho·∫°ch di chuy·ªÉn") {
      sections.push(
        makeParagraph(
          `- Ph∆∞∆°ng ti·ªán: ${planData[category]?.["Ph∆∞∆°ng ti·ªán"] || ""}`
        )
      );
      sections.push(
        makeParagraph(
          `- Gi·ªù kh·ªüi h√†nh: ${planData[category]?.["Gi·ªù kh·ªüi h√†nh"] || ""}`
        )
      );
      sections.push(
        makeParagraph(
          `- ƒê·ªãa ƒëi·ªÉm t·∫≠p trung: ${
            planData[category]?.["ƒê·ªãa ƒëi·ªÉm t·∫≠p trung"] || ""
          }`
        )
      );
    }

    if (category === "N·ªôi dung ch∆∞∆°ng tr√¨nh") {
      const ct = planData[category]?.["Ch∆∞∆°ng tr√¨nh"] || [];
      ct.forEach((item: any) => {
        sections.push(
          makeParagraph(`- ${item.Th·ªùi_gian || ""} ‚Äì ${item.Ho·∫°t_ƒë·ªông || ""}`)
        );
      });
    }

    if (category === "Ban t·ªï ch·ª©c ch∆∞∆°ng tr√¨nh") {
      const list = planData[category]?.["Ban t·ªï ch·ª©c"] || [];
      const rows = list.map((o: any, i: number) => [
        o.roleContent || "",
        o.fullName || "",
        o.title || "",
      ]);
      sections.push(makeRealTable(["Vai tr√≤", "H·ªç v√† t√™n", "Ch·ª©c v·ª•"], rows));
    }

    if (category === "Ti·∫øn ƒë·ªô th·ª±c hi·ªán ch∆∞∆°ng tr√¨nh") {
      const td = planData[category]?.["Ti·∫øn ƒë·ªô"] || [];
      const rows = td.map((t: any) => [
        t.Th·ªùi_gian || "",
        t.N·ªôi_dung || "",
        t.Ng∆∞·ªùi_th·ª±c_hi·ªán || "",
      ]);
      sections.push(
        makeRealTable(["Th·ªùi gian", "N·ªôi dung", "Ng∆∞·ªùi th·ª±c hi·ªán"], rows)
      );
    }

    if (category === "Kinh ph√≠ th·ª±c hi·ªán") {
      const kp = planData[category]?.["Kinh ph√≠"] || [];
      const rows = kp.map((k: any, i: number) => [
        (i + 1).toString(),
        k.N·ªôi_dung || "",
        k.ƒê∆°n_v·ªã || "",
        k.Th√†nh_ti·ªÅn || "",
      ]);
      sections.push(
        makeRealTable(["STT", "N·ªôi dung", "ƒê∆°n v·ªã", "Th√†nh ti·ªÅn"], rows)
      );
    }

    if (category === "Th√†nh ph·∫ßn tham d·ª±") {
      sections.push(makeParagraph(planData[category]?.["Danh s√°ch"] || ""));
    }

    index++;
  }

  // üìÑ T·∫°o file Word
  const doc = new Document({
    sections: [{ properties: {}, children: sections }],
  });

  const blob = await Packer.toBlob(doc);
  saveAs(blob, `KeHoach_${eventTitle}.docx`);
}
